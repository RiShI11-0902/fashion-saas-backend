// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  email           String        @unique
  password        String?
  avatar          String? // Google profile picture
  googleId        String?       @unique
  name            String?
  stores          Store[]
  plan            Plan? // FREE, PREMIUM, or null if only buying AI pack
  subscription    Subscription?
  allowedGenerate Int           @default(1)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())

  Payment Payment[]
}

model Store {
  id           String    @id @default(uuid())
  name         String
  description  String
  logo         String
  banner       String
  url          String    @unique
  ownerId      String
  owner        User      @relation(fields: [ownerId], references: [id])
  products     Product[]
  categories   String[]
  slug         String    @unique
  mobileNumber String
  orders       Order[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Float
  inventory   Int
  category    String
  description String
  image       String
  storeId     String
  discount    Int      @default(0)
  sizes       String[]
  store       Store    @relation(fields: [storeId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Order {
  id                    String      @id @default(uuid())
  customerName          String
  customerEmail         String
  customerMobileNumber  String
  alternateMobileNumber String?
  customerAddress       String
  totalAmount           Float
  status                OrderStatus @default(PENDING)
  orderNumber           Int         @unique @default(autoincrement()) // customer-facing
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  items OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  productId String
  name      String
  price     Float
  quantity  Int
  imageUrl  String?
  storeId   String
  storeName String
  size      String

  // Relation to Order
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Plan {
  FREE
  PREMIUM
  AI_ONLY
}

model Subscription {
  id                     String    @id @default(uuid())
  user                   User      @relation(fields: [userId], references: [id])
  userId                 String    @unique
  plan                   Plan?
  razorpaySubscriptionId String    @unique // store Razorpay subscription id
  payments               Payment[] // relation to Payment
  aiPacks                AIPack[] // Optional: store selected AI packs
  status                 String // PENDING, ACTIVE, CANCELLED
  startedAt              DateTime  @default(now())
  expiresAt              DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model AIPack {
  id             String        @id @default(uuid())
  name           String
  price          Float
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
}

model Payment {
  id                     String        @id @default(uuid())
  razorpayPaymentId      String        @unique // e.g. "pay_xxxxx"
  razorpaySubscriptionId String? // optional if using orders
  razorpaySignature      String? // signature from webhook
  amount                 Int
  currency               String        @default("INR")
  status                 String // created, captured, failed
  subscription           Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId         String?
  user                   User          @relation(fields: [userId], references: [id])
  userId                 String
  createdAt              DateTime      @default(now())
}
